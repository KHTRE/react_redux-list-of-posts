{"version":3,"sources":["store/postsListSlice.ts","store/postDetailsSlice.ts","store/commentsSlice.ts","api/api.ts","api/posts.ts","api/comments.ts","store/index.ts","components/PostsList/PostsList.tsx","api/users.ts","components/Header/Header.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["SET_POSTS","SET_SELECTED_POST_ID","SET_SELECTED_USER_ID","setPosts","posts","type","payload","setSelectedPostId","id","initialState","userId","title","body","createdAt","updatedAt","selectedPostId","selectedUserId","postsReducer","state","action","SET_POST_DETAILS","postDetailsReducer","SET_COMMENTS","comments","commentsReducer","BASE_URL","getUserPosts","a","url","fetch","response","json","getPostDetails","postId","getPostComments","postComment","nameForComment","emailForComment","bodyForComment","data","name","email","method","headers","JSON","stringify","deleteComment","rootReducer","combineReducers","postsListSlice","postDetailsSlice","commentsSlice","getPostsFromServer","dispatch","console","log","getCommentsFromServer","store","createStore","composeWithDevTools","applyMiddleware","thunk","PostsList","useSelector","useDispatch","useEffect","handleOpenPost","event","currentTarget","className","length","map","post","classNames","String","onClick","getUsersList","Header","useState","users","setUsers","getUsersFromServer","usersFromServer","htmlFor","value","onChange","target","user","NewCommentForm","setNameForComment","setEmailForComment","setBodyForComment","handleAddComment","preventDefault","onSubmit","placeholder","PostDetails","selectedPostDetails","commentsVisible","setCommentsVisible","postDetails","getPostDetailsFromServer","toggleComments","deleteHandler","comment","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8a406e9.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n// Action types\nconst SET_POSTS = 'SET_POSTS';\nconst SET_SELECTED_POST_ID = 'SET_SELECTED_POST_ID';\nconst SET_SELECTED_USER_ID = 'SET_SELECTED_USER_ID';\n\n// Action creators\nexport const setPosts = (posts: Post[]) => ({ type: SET_POSTS, payload: posts });\nexport const setSelectedPostId = (id: number) => ({ type: SET_SELECTED_POST_ID, payload: id });\nexport const setSelectedUserId = (id: number) => ({ type: SET_SELECTED_USER_ID, payload: id });\n\nconst initialState: PostsListSlice = {\n  posts: [{\n    id: 0,\n    userId: 0,\n    title: '',\n    body: '',\n    createdAt: '',\n    updatedAt: '',\n  }],\n  selectedPostId: 0,\n  selectedUserId: 0,\n};\n\nconst postsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case SET_SELECTED_POST_ID:\n      return {\n        ...state,\n        selectedPostId: action.payload,\n      };\n\n    case SET_SELECTED_USER_ID:\n      return {\n        ...state,\n        selectedUserId: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","import { AnyAction } from 'redux';\n// Action types\nconst SET_POST_DETAILS = 'SET_POST_DETAILS';\n\n// Action creators\nexport const setPostDetails = (posts: Post[]) => ({ type: SET_POST_DETAILS, payload: posts });\n\nconst initialState: PostDetailsSlice = {\n  body: '',\n  createdAt: '',\n  id: 0,\n  title: '',\n  updatedAt: '',\n  userId: 0,\n};\n\nconst postDetailsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POST_DETAILS:\n      return {\n        ...state,\n        ...action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postDetailsReducer;\n","import { AnyAction } from 'redux';\n// Action types\nconst SET_COMMENTS = 'SET_COMMENTS';\n\n// Action creators\nexport const setComments = (posts: Post[]) => ({ type: SET_COMMENTS, payload: posts });\n\nconst initialState: CommentsSlice = {\n  comments: [],\n};\n\nconst commentsReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_COMMENTS:\n      return {\n        ...state,\n        comments: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default commentsReducer;\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId = 0) => {\n  let url = `${BASE_URL}/posts`;\n\n  if (userId !== 0) {\n    url = `${BASE_URL}/posts?userId=${userId}`;\n  }\n\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const url = `${BASE_URL}/posts/${postId}`;\n  const response = await fetch(url);\n\n  return response.json();\n};\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const url = `${BASE_URL}/comments?postId=${postId}`;\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const postComment = async (\n  postId: number,\n  nameForComment: string,\n  emailForComment: string,\n  bodyForComment: string,\n) => {\n  const data = {\n    postId,\n    name: nameForComment,\n    email: emailForComment,\n    body: bodyForComment,\n  };\n  const url = 'https://mate.academy/students-api/comments';\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n\n  return response.json();\n};\n\nexport const deleteComment = async (postId: string) => {\n  const url = `https://mate.academy/students-api/comments/${postId}`;\n\n  await fetch(url, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\nimport postsReducer, { setPosts } from './postsListSlice';\nimport postDetailsReducer, { setPostDetails } from './postDetailsSlice';\nimport commentsReducer, { setComments } from './commentsSlice';\nimport { getUserPosts, getPostDetails } from '../api/posts';\nimport { getPostComments } from '../api/comments';\n\n/**\n * Each concrete reducer will receive all the actions but only its part of the state\n */\nconst rootReducer = combineReducers({\n  postsListSlice: postsReducer,\n  postDetailsSlice: postDetailsReducer,\n  commentsSlice: commentsReducer,\n});\n\n// We automatically get types returned by concrete reducers\n// export type RootState = ReturnType<typeof rootReducer>;\n\n/**\n * Thunk - is a function that should be used as a normal action creator\n *\n * dispatch(loadMessage())\n */\nexport const getPostsFromServer = (selectedUserId: number) => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    try {\n      const posts = await getUserPosts(selectedUserId);\n\n      dispatch(setPosts(posts));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error loading posts', error);\n    }\n  };\n};\n\nexport const getPostDetailsFromServer = (selectedPostId: number) => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    try {\n      const postDetails = await getPostDetails(selectedPostId);\n\n      dispatch(setPostDetails(postDetails));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error loading details', error);\n    }\n  };\n};\n\nexport const getCommentsFromServer = (selectedPostId: number) => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    try {\n      const comments = await getPostComments(selectedPostId);\n\n      dispatch(setComments(comments));\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error loading comments', error);\n    }\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { getPostsFromServer } from '../../store/index';\nimport { setSelectedPostId } from '../../store/postsListSlice';\n\nimport './PostsList.scss';\n\nexport const PostsList = () => {\n  const {\n    selectedUserId,\n    selectedPostId,\n    posts,\n  } = useSelector((state: PostsState) => state.postsListSlice);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getPostsFromServer(selectedUserId));\n  }, []);\n\n  const handleOpenPost = (event: React.MouseEvent<HTMLButtonElement>) => {\n    dispatch(setSelectedPostId(+event.currentTarget.name));\n  };\n\n  const getVisiblePosts = () => {\n    if (posts.length !== 0) {\n      return (\n        posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classNames(\n                'PostsList__button',\n                'button',\n                { 'PostsList__button--opened': selectedPostId === post.id },\n              )}\n              name={String(post.id)}\n              onClick={handleOpenPost}\n            >\n              Open\n            </button>\n          </li>\n        ))\n      );\n    }\n\n    return (<span>This user does not have posts yet</span>);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {getVisiblePosts()}\n      </ul>\n    </div>\n  );\n};\n","import { BASE_URL } from './api';\n\nexport const getUsersList = async () => {\n  const url = `${BASE_URL}/users`;\n\n  const response = await fetch(url);\n\n  return response.json();\n};\n","import { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPostsFromServer } from '../../store/index';\nimport { setSelectedUserId, setSelectedPostId } from '../../store/postsListSlice';\nimport { getUsersList } from '../../api/users';\n\nexport const Header = () => {\n  const dispatch = useDispatch();\n  const selectedUserId = useSelector((state: PostsState) => state.postsListSlice.selectedUserId);\n\n  const handleUserSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (+event.target.value !== selectedUserId) {\n      dispatch(setSelectedUserId(+event.target.value));\n      dispatch(getPostsFromServer(+event.target.value));\n    }\n\n    dispatch(setSelectedPostId(0));\n  };\n\n  const [users, setUsers] = useState([]);\n\n  const getUsersFromServer = async () => {\n    const usersFromServer = await getUsersList();\n\n    setUsers(usersFromServer);\n  };\n\n  useEffect(() => {\n    getUsersFromServer();\n  }, [users]);\n\n  return (\n    <header className=\"App__header\">\n      <label htmlFor=\"select\">\n        Select a user: &nbsp;\n        <select\n          className=\"App__user-selector\"\n          id=\"select\"\n          value={selectedUserId}\n          onChange={handleUserSelect}\n        >\n          {users.map(\n            (user) => {\n              const { id, name } = user;\n\n              return (<option value={id}>{name}</option>);\n            },\n          )}\n        </select>\n      </label>\n    </header>\n  );\n};\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getCommentsFromServer } from '../../store/index';\nimport './NewCommentForm.scss';\nimport { postComment } from '../../api/comments';\n\nexport const NewCommentForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedPostId = useSelector((state: PostsState) => state.postsListSlice.selectedPostId);\n  const [nameForComment, setNameForComment] = useState<string>('');\n  const [emailForComment, setEmailForComment] = useState<string>('');\n  const [bodyForComment, setBodyForComment] = useState<string>('');\n\n  const handleNameInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNameForComment(event.target.value);\n  };\n\n  const handleEmailInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmailForComment(event.target.value);\n  };\n\n  const handleBodyInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBodyForComment(event.target.value);\n  };\n\n  const handleAddComment = async (event: React.FormEvent) => {\n    event.preventDefault();\n    await postComment(\n      selectedPostId,\n      nameForComment,\n      emailForComment,\n      bodyForComment,\n    );\n    setNameForComment('');\n    setEmailForComment('');\n    setBodyForComment('');\n\n    dispatch(getCommentsFromServer(selectedPostId));\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleAddComment}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={nameForComment}\n          onChange={handleNameInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={emailForComment}\n          onChange={handleEmailInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={bodyForComment}\n          onChange={handleBodyInput}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPostDetailsFromServer, getCommentsFromServer } from '../../store/index';\nimport { NewCommentForm } from '../NewCommentForm';\n// import { Loader } from '../Loader';\nimport './PostDetails.scss';\n\nimport { deleteComment } from '../../api/comments';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedPostId = useSelector((state: PostsState) => state.postsListSlice.selectedPostId);\n  const selectedPostDetails = useSelector((state: PostsState) => state.postDetailsSlice);\n  const comments = useSelector((state: PostsState) => state.commentsSlice.comments);\n\n  const [commentsVisible, setCommentsVisible] = useState(false);\n\n  useEffect(() => {\n    dispatch(getPostDetailsFromServer(selectedPostId));\n    dispatch(getCommentsFromServer(selectedPostId));\n  }, [selectedPostId]);\n\n  const toggleComments = () => {\n    setCommentsVisible(!commentsVisible);\n  };\n\n  const getCommentsButton = () => {\n    if (comments && comments.length > 0) {\n      return (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={toggleComments}\n        >\n          {!commentsVisible\n            ? `Show ${comments.length} comments`\n            : `Hide ${comments.length} comments`}\n        </button>\n      );\n    }\n\n    return (\n      <span>No comments found</span>\n    );\n  };\n\n  const deleteHandler = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    await deleteComment(event.currentTarget.name);\n    dispatch(getCommentsFromServer(selectedPostId));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {selectedPostId !== 0 ? (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{selectedPostDetails && selectedPostDetails.title}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {getCommentsButton()}\n\n            <ul className=\"PostDetails__list\">\n              {comments && commentsVisible && comments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    name={String(comment.id)}\n                    onClick={deleteHandler}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm />\n            </div>\n          </section>\n        </>\n      ) : (\n        <span>Please select a post to see details</span>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { PostsList } from './components/PostsList';\nimport { Header } from './components/Header';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}